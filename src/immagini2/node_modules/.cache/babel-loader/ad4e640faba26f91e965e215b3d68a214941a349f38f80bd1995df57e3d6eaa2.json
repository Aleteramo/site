{"ast":null,"code":"import React,{useRef,useEffect}from'react';import*as THREE from'three';import{OrbitControls}from'three/examples/jsm/controls/OrbitControls';import logoImage from'./immagini2/logounite.jpeg';// Assicurati che il percorso sia corretto\nimport{jsx as _jsx}from\"react/jsx-runtime\";const NeuralScene=_ref=>{let{isScrolled}=_ref;const mountRef=useRef(null);useEffect(()=>{// Inizializzazione della scena, della camera e del renderer\nconst scene=new THREE.Scene();const camera=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,0.1,1000);camera.position.z=5;const renderer=new THREE.WebGLRenderer({antialias:true});// Imposta alpha: true per sfondo trasparente\nrenderer.setSize(window.innerWidth,window.innerHeight);mountRef.current.appendChild(renderer.domElement);let cube;const controls=new OrbitControls(camera,renderer.domElement);controls.enableZoom=false;// Disabilita lo zoom di OrbitControls\nconst textureLoader=new THREE.TextureLoader();textureLoader.load(logoImage,function(texture){texture.minFilter=THREE.LinearFilter;texture.magFilter=THREE.LinearFilter;const material=new THREE.MeshBasicMaterial({map:texture});const materials=Array(6).fill(material);const cubeGeometry=new THREE.BoxGeometry(0.5,0.5,0.5);cube=new THREE.Mesh(cubeGeometry,materials);cube.position.set(isScrolled?2:0,isScrolled?2:1,1);scene.add(cube);});// Particelle\nconst particlesGeometry=new THREE.BufferGeometry();const particlesCount=10000;const posArray=new Float32Array(particlesCount*3);// x, y, z per ogni particella\nfor(let i=0;i<particlesCount*3;i++){posArray[i]=(Math.random()-0.5)*(Math.random()*5);}particlesGeometry.setAttribute('position',new THREE.BufferAttribute(posArray,3));const particlesMaterial=new THREE.PointsMaterial({size:0.007});const particlesMesh=new THREE.Points(particlesGeometry,particlesMaterial);scene.add(particlesMesh);// Luci\nconst light=new THREE.AmbientLight(0x404040);// luce soffusa\nscene.add(light);const directionalLight=new THREE.DirectionalLight(0xffffff,1);directionalLight.position.set(0,0,0);scene.add(directionalLight);// Animazione\nconst animate=()=>{requestAnimationFrame(animate);// Rotazione delle particelle\nif(particlesMesh){particlesMesh.rotation.y+=0.001;}// Rotazione del cubo\nif(cube){cube.rotation.x+=0.01;cube.rotation.y+=0.01;}controls.update();renderer.render(scene,camera);};animate();// Gestione del ridimensionamento della finestra\nconst onWindowResize=()=>{camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);};window.addEventListener('resize',onWindowResize,false);// Pulizia alla dismount del componente\nreturn()=>{window.removeEventListener('resize',onWindowResize);if(mountRef.current&&renderer.domElement){mountRef.current.removeChild(renderer.domElement);}};},[isScrolled]);// Riesegui questo effetto se isScrolled cambia\nreturn/*#__PURE__*/_jsx(\"div\",{ref:mountRef,className:\"scene-container\"});};export default NeuralScene;","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","logoImage","jsx","_jsx","NeuralScene","_ref","isScrolled","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","cube","controls","enableZoom","textureLoader","TextureLoader","load","texture","minFilter","LinearFilter","magFilter","material","MeshBasicMaterial","map","materials","Array","fill","cubeGeometry","BoxGeometry","Mesh","set","add","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","particlesMesh","Points","light","AmbientLight","directionalLight","DirectionalLight","animate","requestAnimationFrame","rotation","y","x","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","ref","className"],"sources":["/Users/alessiocavatassi/Presentazionetesi/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg'; // Assicurati che il percorso sia corretto\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    // Inizializzazione della scena, della camera e del renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true }); // Imposta alpha: true per sfondo trasparente\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    let cube;\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false; // Disabilita lo zoom di OrbitControls\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function(texture) {\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const materials = Array(6).fill(material);\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      cube = new THREE.Mesh(cubeGeometry, materials);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3); // x, y, z per ogni particella\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 5);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({ size: 0.007 });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040); // luce soffusa\n    scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n    // Animazione\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Rotazione delle particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n\n      // Rotazione del cubo\n      if (cube) {\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Gestione del ridimensionamento della finestra\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Pulizia alla dismount del componente\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [isScrolled]); // Riesegui questo effetto se isScrolled cambia\n\n  return (\n    <div ref={mountRef} className=\"scene-container\" />\n  );\n};\n\nexport default NeuralScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}